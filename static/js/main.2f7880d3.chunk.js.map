{"version":3,"sources":["1-lira-tura.png","1-lira-yazi.png","components/Coin.js","components/CoinFlipper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Coin","props","currentStatus","donuyor","className","src","CoinTura","alt","CoinYazi","options","CoinFlipper","atisYap","setState","arr","rastgeleEleman","Math","floor","random","length","setTimeout","gelenler","state","yaziGelenToplam","turaGelenToplam","toplamAtis","this","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,uRCuB5BC,EAlBF,SAACC,GAAW,IACbC,EAA2BD,EAA3BC,cAAeC,EAAYF,EAAZE,QACvB,OACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAS,eAAUD,GAAW,gBAC/B,yBAAKE,IAAKC,IAAUC,IAAI,OACpBH,UACsB,SAAlBF,EAA2B,aAAe,cAGlD,yBAAKG,IAAKG,IAAUD,IAAI,OAAOH,UACL,SAAlBF,EAA2B,aAAe,iBCZ5DO,EAAU,CAAC,OAAQ,QAoEVC,E,kDA3DX,WAAYT,GAAO,IAAD,8BACd,cAAMA,IAWVU,QAAU,WACN,EAAKC,SAAS,CACVT,SAAS,IAEb,IAvBoBU,EAuBdC,GAvBcD,EAuBsBJ,GAtB5BM,KAAKC,MAAMD,KAAKE,SAAWJ,EAAIK,SAuB7CC,YAAW,WACP,EAAKP,SAAS,CACVV,cAAeY,EACfM,SAAS,GAAD,mBAAM,EAAKC,MAAMD,UAAjB,CAA2BN,IACnCX,SAAS,MAEd,KAECW,IAAmBL,EAAQ,GAC3B,EAAKG,SAAS,CACVU,gBAAiB,EAAKD,MAAMC,gBAAkB,IAE5CR,IAAmBL,EAAQ,IACjC,EAAKG,SAAS,CACVW,gBAAiB,EAAKF,MAAME,gBAAkB,IAGtD,EAAKX,SAAS,CAACY,WAAY,EAAKH,MAAMG,WAAY,KAhClD,EAAKH,MAAQ,CACTnB,cAAeO,EAAQ,GACvBW,SAAU,GACVjB,SAAS,EACTmB,gBAAiB,EACjBC,gBAAiB,EACjBC,WAAY,GARF,E,qDAqCR,IAAD,EACoFC,KAAKJ,MAAvFnB,EADF,EACEA,cAAeC,EADjB,EACiBA,QAASiB,EAD1B,EAC0BA,SAAUE,EADpC,EACoCA,gBAAiBC,EADrD,EACqDA,gBAAiBC,EADtE,EACsEA,WAC3E,OACI,6BACI,oDAGA,kBAAC,EAAD,CAAMtB,cAAeA,EAAeC,QAASA,IAC7C,4BAAQuB,QAASD,KAAKd,QAASP,UAAU,OAAzC,sBAEIgB,EAASF,OAAS,IAAMf,GAAW,4BAAKD,EAAL,UAEvC,sDAAkBsB,EAAlB,KACA,iDAAkBF,EAAlB,KACA,4CAAkBC,EAAlB,U,GApDUI,aCGXC,MAVf,WACE,OAEE,yBAAKxB,UAAU,OACX,kBAAC,EAAD,QCGYyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2f7880d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1-lira-tura.7c42669a.png\";","module.exports = __webpack_public_path__ + \"static/media/1-lira-yazi.9b70882e.png\";","import React from 'react';\nimport \"./CoinStyles.css\";\nimport CoinTura from \"../1-lira-tura.png\";\nimport CoinYazi from \"../1-lira-yazi.png\";\n\nconst Coin = (props) => {\n    const { currentStatus, donuyor } = props;\n    return (\n        <div className=\"Coin-container\">\n            <div className={`Coin ${donuyor && \"Coin-rotate\"}`}>\n                <img src={CoinTura} alt=\"tura\"\n                    className={\n                        currentStatus === \"Tura\" ? \"Coin-front\" : \"Coin-back\"\n                    }\n                />\n                <img src={CoinYazi} alt=\"yazi\" className={\n                        currentStatus === \"Yazi\" ? \"Coin-front\" : \"Coin-back\"\n                } />\n            </div>\n        </div>\n    );\n};\n\nexport default Coin;","import React, {Component} from 'react';\nimport \"./CoinFlipperStyles.css\";\nimport Coin from \"./Coin\";\n\nconst options = [\"Yazi\", \"Tura\" ];\n\nconst getRandomElFromArr = (arr) => {\n  const randomIndex = Math.floor(Math.random() * arr.length);\n  const randomItem =  arr[randomIndex];\n  return randomItem;\n};\n\nclass CoinFlipper extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            currentStatus: options[0],\n            gelenler: [],\n            donuyor: false,\n            yaziGelenToplam: 0,\n            turaGelenToplam: 0,\n            toplamAtis: 0\n        }\n    }\n\n    atisYap = () => {\n        this.setState({\n            donuyor: true\n        });\n        const rastgeleEleman = getRandomElFromArr(options);\n        setTimeout(() => {\n            this.setState({\n                currentStatus: rastgeleEleman,\n                gelenler: [...this.state.gelenler, rastgeleEleman],\n                donuyor: false\n            })\n        }, 1000);\n\n        if (rastgeleEleman === options[0]) {\n            this.setState({\n                yaziGelenToplam: this.state.yaziGelenToplam + 1 \n            });\n        } else if(rastgeleEleman === options[1]) {\n            this.setState({\n                turaGelenToplam: this.state.turaGelenToplam + 1\n            });\n        }\n        this.setState({toplamAtis: this.state.toplamAtis +1})\n    }\n\n    render() {\n        const {currentStatus, donuyor, gelenler, yaziGelenToplam, turaGelenToplam, toplamAtis} = this.state;\n        return (\n            <div>\n                <h1>\n                    Yazı ya da Tura\n                </h1>\n                <Coin currentStatus={currentStatus} donuyor={donuyor}/>\n                <button onClick={this.atisYap} className=\"btn\">Atış yap</button>\n                {\n                    gelenler.length > 0 && !donuyor && <h3>{currentStatus} geldi</h3>\n                }\n                <h3>Toplam atış: {toplamAtis} </h3>\n                <h3>Toplam yazı: {yaziGelenToplam} </h3>\n                <h3>Toplam tura: {turaGelenToplam} </h3>\n            </div>\n        );\n    }\n}\n\n\n\nexport default CoinFlipper;","import React from 'react';\nimport './App.css';\n\nimport CoinFlipper from \"./components/CoinFlipper\";\n\nfunction App() {\n  return (\n    \n    <div className=\"App\">\n        <CoinFlipper />\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}